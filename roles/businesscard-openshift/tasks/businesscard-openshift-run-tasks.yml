# Create the /opt/dinfo/etc/dbs.conf and
# /var/www/vhosts/businesscard.epfl.ch/private/etc/access_conf secrets
- name: "businesscard secrets"
  openshift:
    state: latest
    apiVersion: v1
    kind: Secret
    metadata:
      name: businesscard-secrets
      namespace: '{{ openshift_namespace }}'
    type: Opaque
    data:
      dbs.conf: '{{ _dbs_conf | base64 }}'
  vars:
    _dbs_conf: |
      {% for k, el in keybase_secrets.cadi_dbs.items() %}
      {{ k }}	{{ el.db_name }}	{{ el.db_host }}	{{ el.db_user }}	{{ el.db_pass }}
      {% endfor %}
  tags:
    - all
    - all_run
    - businesscard.dbs
    - businesscard.secrets



- name: Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        labels:
          app: businesscard
        name: businesscard-service
        namespace: "{{ openshift_namespace }}"
      spec:
        ports:
          - name: 8080-tcp
            port: 8080
            protocol: TCP
            targetPort: 8080
        selector:
          deploymentconfig: businesscard
        sessionAffinity: None
        type: ClusterIP
  tags:
    - all
    - all_run
    - businesscard.service



- name: Routes
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        labels:
          app: businesscard
        name: businesscard-route-{{ item }}
        namespace: "{{ openshift_namespace }}"
      spec:
        host: "{{ item }}"
        port:
          targetPort: 8080-tcp
        tls:
          termination: edge
        to:
          kind: Service
          name: businesscard-service
          weight: 100
        wildcardPolicy: None
  with_items: "{{ businesscard_routes }}"

  tags:
    - all
    - all_run
    - businesscard.routes



- name: Config Map
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: businesscard-conf
        namespace: "{{ openshift_namespace }}"
      data:
        SITE_URL: "{{ businesscard_hostname }}"
        TEQUILA_HOST: "{{ tequila_hostname }}"
        TEQUILA_ENVIRONMENT: "{{ tequila_environment }}"
        BUSINESSCARD_ENVIRONMENT: "{{ inventory_environment }}"
        MAIL_SF: "{{ mail_SF }}"
  tags:
    - all
    - all_run
    - businesscard.config
    - businesscard.cm

- name: Promote {{ businesscard_image_name }} image to production
  when:
    - >-
      businesscard_build_openshift_namespace != openshift_namespace
    - >-
      "businesscard.promote" in ansible_run_tags
  shell:
    cmd: |
      oc tag {{ businesscard_build_openshift_namespace }}/{{ businesscard_image_name }}:preprod {{ openshift_namespace }}/{{ businesscard_image_name }}:{{ businesscard_image_tag }}
  tags:
    - all
    - all_run
    - businesscard.promote


- name: "Cronjob for sending mail at {{ mail_SF }}"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: extractscript
        namespace: "{{ openshift_namespace }}"
      spec:
        schedule: "* 5 1 * *"
        concurrencyPolicy: "Replace"
        startingDeadlineSeconds: 200
        suspend: false
        successfulJobsHistoryLimit: 1
        failedJobsHistoryLimit: 1
        jobTemplate:
          spec:
            template:
              spec:
                containers:
                - name: extractscript
                  image: "docker-registry.default.svc:5000/{{ openshift_namespace }}/{{ businesscard_image_name }}:{{ businesscard_image_tag }}"
                  entrypoint: ["perl", "/var/www/scripts/extract"]
                  env:
                  - name: MAIL_SF
                    value: "{{ mail_SF }}"
                  - name: SASL_USERNAME
                    value: "{{ keybase_businesscard_service_mail_account.service }}"
                  - name: SASL_PASSWORD
                    value: "{{ keybase_businesscard_service_mail_account.password }}"
                  imagePullPolicy: Always
                  volumeMounts:
                  - name: businesscard-secrets
                    mountPath: /opt/dinfo/etc/dbs.conf
                    subPath: dbs.conf
                volumes:
                - name: businesscard-secrets
                  secret:
                    secretName: businesscard-secrets
                restartPolicy: Never
  tags:
    - all
    - all_run
    - businesscard.cronjob


- name: "Testing extract job (with mail at {{ mail_SF }})"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: extractscript
        namespace: "{{ openshift_namespace }}"
      spec:
        parallelism: 1
        completions: 1
        activeDeadlineSeconds: 180 
        backoffLimit: 5
        template:
          spec:
            containers:
            - name: extractscript
              image: "docker-registry.default.svc:5000/{{ openshift_namespace }}/{{ businesscard_image_name }}:{{ businesscard_image_tag }}"
              entrypoint: ["perl", "/var/www/scripts/extract"]
              env:
              # The export script will be in debug mode if set
              - name: FAKE_MAIL_EXPORT
                value: businesscard-ops+test@groupes.epfl.ch

              # Either define the FAKE_MONTH (0-11)...
              # - name: FAKE_MONTH
              #   value: ""
              # or both the BEGIN_DATE and the END_DATE for export
              - name: BEGIN_DATE
                value: "2023-01-01 00:00:00"
              - name: END_DATE
                value: "2023-12-31 23:59:59"

              # Authenticated email username and password
              - name: SASL_USERNAME
                value: "{{ keybase_businesscard_service_mail_account.service }}"
              - name: SASL_PASSWORD
                value: "{{ keybase_businesscard_service_mail_account.password }}"
              # The recipient of the mail, rewwritten by FAKE_MAIL_EXPORT
              - name: MAIL_SF
                value: ""
              # These are not used by the extract script but present in the Apache's pass_env
              - name: MAIL_REPRO
                value: ""
              - name: TEQUILA_HOST
                value: ""
              - name: TEQUILA_ENVIRONMENT
                value: ""

              imagePullPolicy: Always
              volumeMounts:
              - name: businesscard-secrets
                mountPath: /opt/dinfo/etc/dbs.conf
                subPath: dbs.conf
            volumes:
            - name: businesscard-secrets
              secret:
                secretName: businesscard-secrets
            restartPolicy: Never
  tags:
    - testjob


# https://docs.openshift.com/container-platform/3.11/dev_guide/deployments/how_deployments_work.html#creating-a-deployment-configuration
- name: Deployment Config
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: businesscard
      namespace: "{{ openshift_namespace }}"
      labels:
        app: businesscard
    spec:
      replicas: 1
      selector:
        app: businesscard
        deploymentconfig: businesscard
      template:
        metadata:
          labels:
            app: businesscard
            deploymentconfig: businesscard
        spec:
          containers:
            - name: businesscard
              image: "docker-registry.default.svc:5000/{{ openshift_namespace }}/{{ businesscard_image_name }}:{{ businesscard_image_tag }}"
              ports:
                - containerPort: 8080
                  protocol: "TCP"
              imagePullPolicy: Always
              volumeMounts:
                - name: businesscard-secrets
                  mountPath: /opt/dinfo/etc/dbs.conf
                  subPath: dbs.conf
                - name: businesscard-secrets
                  mountPath: "/var/www/vhosts/{{ businesscard_vhost_dir }}/private/etc/access_params"
                  subPath: access_params
              envFrom:
                - configMapRef:
                    name: businesscard-conf
          volumes:
            - name: businesscard-secrets
              secret:
                secretName: businesscard-secrets
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - businesscard
            from:
              kind: ImageStreamTag
              name: "{{ businesscard_image_name }}:{{ businesscard_image_tag }}"
              namespace: "{{ openshift_namespace }}"
        - type: ConfigChange
  register: _businesscard_deploymentconfig
  tags:
    - all
    - all_run
    - businesscard.dc
    - businesscard.deploy
    - businesscard.deploy.force
    - businesscard.deploymentconfig



- name: "Redeploy businesscard now"
  shell:
    cmd: "oc -n {{ openshift_namespace }} rollout latest dc/businesscard"
  register: "_redeploy"
  when: >
    _businesscard_deploymentconfig is changed
    or
    "businesscard.deploy.force" in ansible_run_tags
  failed_when: >
    _redeploy.rc != 0 and "already in progress" not in _redeploy.stderr
  tags:
    - all
    - all_run
    - businesscard.deploy.force
