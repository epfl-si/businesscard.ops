# Create the /opt/dinfo/etc/dbs.conf and
# /var/www/vhosts/businesscard.epfl.ch/private/etc/access_conf secrets
- name: "businesscard secrets"
  openshift:
    state: latest
    apiVersion: v1
    kind: Secret
    metadata:
      name: businesscard-secrets
      namespace: '{{ openshift_namespace }}'
    type: Opaque
    data:
      dbs.conf: '{{ _dbs_conf | base64 }}'
      # access_params: '{{ _access_params | base64 }}'
  vars:
    _dbs_conf: |
      {% for k, el in keybase_secrets.cadi_dbs.items() %}
      {{ k }}	{{ el.db_name }}	{{ el.db_host }}	{{ el.db_user }}	{{ el.db_pass }}
      {% endfor %}
    # _access_params: |
    #    $sap_user = '{{ keybase_secrets.sap.user }}';
    #    $sap_pwd  = '{{ keybase_secrets.sap.password }}';
  tags:
    - businesscard.dbs
    - businesscard.secrets



- name: Service
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        labels:
          app: businesscard
        name: businesscard-service
        namespace: "{{ openshift_namespace }}"
      spec:
        ports:
          - name: 8080-tcp
            port: 8080
            protocol: TCP
            targetPort: 8080
        selector:
          deploymentconfig: businesscard
        sessionAffinity: None
        type: ClusterIP
  tags:
    - businesscard.service



- name: Routes
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        labels:
          app: businesscard
        name: businesscard-route-{{ item }}
        namespace: "{{ openshift_namespace }}"
      spec:
        host: "{{ item }}"
        port:
          targetPort: 8080-tcp
        tls:
          termination: edge
        to:
          kind: Service
          name: businesscard-service
          weight: 100
        wildcardPolicy: None
  with_items: "{{ businesscard_routes }}"

  tags:
    - businesscard.routes



- name: Config Map
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: businesscard-conf
        namespace: "{{ openshift_namespace }}"
      data:
        SITE_URL: "{{ businesscard_hostname }}"
        TEQUILA_HOST: "{{ tequila_hostname }}"
        # TEQUILA_FINGERPRINT: "{{ tequila_hostname }}"
        # MOCK_ORACLE: "{{ tequila_hostname }}"
        BUSINESSCARD_APACHE_CONF: "{{ lookup('template', 'businesscard-apache-conf.j2') }}"
        BUSINESSCARD_ENVIRONMENT: "{{ inventory_environment }}"
  tags:
    - businesscard.config
    - businesscard.cm

- name: Promote {{ businesscard_image_name }} image to production
  when:
    - >-
      businesscard_build_openshift_namespace != openshift_namespace
    - >-
      "businesscard.promote" in ansible_run_tags
  shell:
    cmd: |
      oc tag {{ businesscard_build_openshift_namespace }}/{{ businesscard_image_name }}:preprod {{ openshift_namespace }}/{{ businesscard_image_name }}:{{ businesscard_image_tag }}
  tags:
    - businesscard.promote



# https://docs.openshift.com/container-platform/3.11/dev_guide/deployments/how_deployments_work.html#creating-a-deployment-configuration
- name: Deployment Config
  openshift:
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: businesscard
      namespace: "{{ openshift_namespace }}"
      labels:
        app: businesscard
    spec:
      replicas: 1
      selector:
        app: businesscard
        deploymentconfig: businesscard
      template:
        metadata:
          labels:
            app: businesscard
            deploymentconfig: businesscard
        spec:
          containers:
            - name: businesscard
              image: "docker-registry.default.svc:5000/{{ openshift_namespace }}/{{ businesscard_image_name }}:{{ businesscard_image_tag }}"
              ports:
                - containerPort: 8080
                  protocol: "TCP"
              imagePullPolicy: Always
              volumeMounts:
                - name: businesscard-apache-conf-volume
                  mountPath: /usr/local/apache2/conf/25-businesscard.epfl.ch.conf
                  subPath: 25-businesscard.epfl.ch.conf
                - name: businesscard-secrets
                  mountPath: /opt/dinfo/etc/dbs.conf
                  subPath: dbs.conf
                - name: businesscard-secrets
                  mountPath: "/var/www/vhosts/{{ businesscard_vhost_dir }}/private/etc/access_params"
                  subPath: access_params
              envFrom:
                - configMapRef:
                    name: businesscard-conf
          volumes:
            - name: businesscard-apache-conf-volume
              configMap:
                name: businesscard-conf
                items:
                  - key: BUSINESSCARD_APACHE_CONF
                    path: 25-businesscard.epfl.ch.conf
            - name: businesscard-secrets
              secret:
                secretName: businesscard-secrets
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - businesscard
            from:
              kind: ImageStreamTag
              name: "{{ businesscard_image_name }}:{{ businesscard_image_tag }}"
              namespace: "{{ openshift_namespace }}"
        - type: ConfigChange
  register: _businesscard_deploymentconfig
  tags:
    - businesscard.dc
    - businesscard.deploy
    - businesscard.deploy.force
    - businesscard.deploymentconfig



- name: "Redeploy businesscard now"
  shell:
    cmd: "oc -n {{ openshift_namespace }} rollout latest dc/businesscard"
  register: "_redeploy"
  when: >
    _businesscard_deploymentconfig is changed
    or
    "businesscard.deploy.force" in ansible_run_tags
  failed_when: >
    _redeploy.rc != 0 and "already in progress" not in _redeploy.stderr
  tags:
    - businesscard.deploy.force
