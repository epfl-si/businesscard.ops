# Create the /opt/dinfo/etc/dbs.conf and
# /var/www/vhosts/businesscard.epfl.ch/private/etc/access_conf secrets
- name: "businesscard secrets"
  openshift:
    state: latest
    apiVersion: v1
    kind: Secret
    metadata:
      name: businesscard-secrets
      namespace: '{{ openshift_namespace }}'
    type: Opaque
    data:
      dbs.conf: '{{ _dbs_conf | base64 }}'
  vars:
    _dbs_conf: |
      {% for k, el in keybase_secrets.cadi_dbs.items() %}
      {{ k }}	{{ el.db_name }}	{{ el.db_host }}	{{ el.db_user }}	{{ el.db_pass }}
      {% endfor %}
  tags:
    - all
    - all_run
    - businesscard.dbs
    - businesscard.secrets



- name: Service
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        labels:
          app: businesscard
        name: businesscard-service
        namespace: "{{ openshift_namespace }}"
      spec:
        ports:
          - name: 8080-tcp
            port: 8080
            protocol: TCP
            targetPort: 8080
        selector:
          deploymentconfig: businesscard
        sessionAffinity: None
        type: ClusterIP
  tags:
    - all
    - all_run
    - businesscard.service



- name: Routes
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        labels:
          app: businesscard
        name: businesscard-route-{{ item }}
        namespace: "{{ openshift_namespace }}"
      spec:
        host: "{{ item }}"
        port:
          targetPort: 8080-tcp
        tls:
          termination: edge
        to:
          kind: Service
          name: businesscard-service
          weight: 100
        wildcardPolicy: None
  with_items: "{{ businesscard_routes }}"

  tags:
    - all
    - all_run
    - businesscard.routes



- name: Config Map
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: businesscard-conf
        namespace: "{{ openshift_namespace }}"
      data:
        SITE_URL: "{{ businesscard_hostname }}"
        TEQUILA_HOST: "{{ tequila_hostname }}"
        BUSINESSCARD_ENVIRONMENT: "{{ inventory_environment }}"
  tags:
    - all
    - all_run
    - businesscard.config
    - businesscard.cm

- name: Promote {{ businesscard_image_name }} image to production
  when:
    - >-
      businesscard_build_openshift_namespace != openshift_namespace
    - >-
      "businesscard.promote" in ansible_run_tags
  shell:
    cmd: |
      oc tag {{ businesscard_build_openshift_namespace }}/{{ businesscard_image_name }}:preprod {{ openshift_namespace }}/{{ businesscard_image_name }}:{{ businesscard_image_tag }}
  tags:
    - all
    - all_run
    - businesscard.promote
