- name: Pull Secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: businesscard-pull-secret
        namespace: "{{ openshift_namespace }}"
      data:
        .dockerconfigjson: "{{ pull_secret_config | to_json | b64encode }}"

- name: Service Account
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: businesscard
        namespace: "{{ openshift_namespace }}"
      imagePullSecrets:
        - name: businesscard-pull-secret

- name: Set _dbs_conf
  set_fact:
    _dbs_conf: |
      {% for k, el in keybase_secrets.cadi_dbs.items() %}
      {{ k }}	{{ el.db_name }}	{{ el.db_host }}	{{ el.db_user }}	{{ el.db_pass }}
      {% endfor %}

- name: Secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: businesscard-secrets
        namespace: '{{ openshift_namespace }}'
      type: Opaque
      data:
        dbs.conf: '{{ _dbs_conf | base64 }}'

- name: Config Map
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: businesscard-conf
        namespace: "{{ openshift_namespace }}"
      data:
        TEQUILA_HOST: "{{ tequila_hostname }}"
        TEQUILA_ENVIRONMENT: "{{ tequila_environment }}" 
        MAIL_SF: "{{ mail_SF }}"
        MAIL_REPRO: "{{ mail_repro }}"

- name: Service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        labels:
          app: businesscard
        name: businesscard-service
        namespace: "{{ openshift_namespace }}"
      spec:
        ports:
          - name: 8080-tcp
            port: 8080
            protocol: TCP
            targetPort: 8080
        selector:
          app: businesscard
        type: ClusterIP

- name: Routes
  kubernetes.core.k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        labels:
          app: businesscard
          route: private
        name: "{{ businesscard_hostname }}"
        namespace: "{{ openshift_namespace }}"
        annotations:
          haproxy.router.openshift.io/balance: roundrobin
          haproxy.router.openshift.io/disable_cookies: 'true'
      spec:
        host: "{{ businesscard_hostname }}"
        to:
          kind: Service
          name: businesscard-service
          weight: 100
        port:
          targetPort: 8080-tcp
        tls:
          termination: edge
          insecureEdgeTerminationPolicy: Redirect

- name: Deployment
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: businesscard
        namespace: "{{ openshift_namespace }}"
      spec:
        replicas: 1
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 0
        selector:
          matchLabels:
            app: businesscard
        template:
          metadata:
            labels:
              app: businesscard
          spec:
            serviceAccountName: businesscard
            containers:
              - image: "{{ quay_registry }}/{{ app_image_name }}:{{ app_image_tag }}"
                imagePullPolicy: Always
                name: businesscard
                ports:
                  - containerPort: 8080
                resources:
                  requests:
                    cpu: "500m"
                    memory: "1Gi"
                envFrom:
                  - configMapRef:
                      name: businesscard-conf
                livenessProbe:
                  tcpSocket:
                    port: 8080
                  initialDelaySeconds: 15
                  timeoutSeconds: 10
                  periodSeconds: 20
                readinessProbe:
                  tcpSocket:
                    port: 8080
                  initialDelaySeconds: 15
                  timeoutSeconds: 10
                  periodSeconds: 10
                volumeMounts:
                  - name: businesscard-secrets
                    mountPath: /opt/dinfo/etc/dbs.conf
                    subPath: dbs.conf
                  - name: businesscard-secrets
                    mountPath: "/var/www/vhosts/{{ businesscard_vhost_dir }}/private/etc/access_params"
                    subPath: access_params
            volumes:
              - name: businesscard-secrets
                secret:
                  secretName: businesscard-secrets

- name: "Cronjob"
  kubernetes.core.k8s:
    definition:
      apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: extractscript
        namespace: "{{ openshift_namespace }}"
      spec:
        schedule: "* 5 1 * *"
        concurrencyPolicy: "Replace"
        startingDeadlineSeconds: 200
        suspend: false
        successfulJobsHistoryLimit: 1
        failedJobsHistoryLimit: 1
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: businesscard
                containers:
                  - name: extractscript
                    image: "{{ quay_registry }}/{{ app_image_name }}:{{ app_image_tag }}"
                    command: ["perl", "/var/www/scripts/extract"]
                    resources:
                      requests:
                        cpu: "500m"
                        memory: "1Gi"
                    env:
                      - name: MAIL_SF
                        value: "{{ mail_SF }}"
                      - name: SASL_USERNAME
                        value: "{{ keybase_businesscard_service_mail_account.service }}"
                      - name: SASL_PASSWORD
                        value: "{{ keybase_businesscard_service_mail_account.password }}"
                    imagePullPolicy: Always
                    volumeMounts:
                      - name: businesscard-secrets
                        mountPath: /opt/dinfo/etc/dbs.conf
                        subPath: dbs.conf
                volumes:
                  - name: businesscard-secrets
                    secret:
                      secretName: businesscard-secrets
                restartPolicy: Never

- name: App restart
  when: >-
    "app.restart" in ansible_run_tags
  kubernetes.core.k8s:
    state: patched
    kind: Deployment
    definition:
      metadata:
        name: businesscard
        namespace: "{{ openshift_namespace }}"
      spec:
        template:
          metadata:
            annotations:
              last-restart: '{{ ansible_date_time.iso8601 }}'
  tags: app.restart
